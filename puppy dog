A)  CREATE SCHEMA PET; 
USE PET; 
-- CREATE THE PETSTORE TABLE 
CREATE TABLE PETSTORE ( 
    STOREID INT PRIMARY KEY, 
    STORENAME VARCHAR(50), 
    STORELOCATION VARCHAR(100) 
); 

-- CREATE THE DOG TABLE 
CREATE TABLE DOG ( 
    DOGID INT PRIMARY KEY, 
    DOGNAME VARCHAR(50), 
    DATEOFBIRTH DATE, 
    SEX VARCHAR(10), 
    STOREID INT, 
    FOREIGN KEY (STOREID) REFERENCES PETSTORE (STOREID) 
); 

-- CREATE THE OWNER TABLE 
CREATE TABLE DOWNER ( 
    SSN VARCHAR(11) PRIMARY KEY, 
    OWNERNAME VARCHAR(50), 
    ADDRESS VARCHAR(100) 
); 

-- CREATE THE PURCHASE TABLE 
CREATE TABLE PURCHASE ( 
    PURCHASEID INT PRIMARY KEY, 
    DOGID INT, 
    SSN VARCHAR(11), 
    PURCHASEDATE DATE, 
    FOREIGN KEY (DOGID) REFERENCES DOG (DOGID), 
    FOREIGN KEY (SSN) REFERENCES DOWNER (SSN) 
); 
-- INSERT VALUES INTO PETSTORE TABLE 
B)  INSERT INTO PETSTORE (STOREID, STORENAME, 
STORELOCATION) 
VALUES 
    (1, 'PET HAVEN', 'NEW YORK'), 
    (2, 'PUPPY PARADISE', 'LOS ANGELES'), 
    (3, 'DOGGY DELIGHT', 'CHICAGO'), 
    (4, 'PAWSOME PETS', 'SAN FRANCISCO'), 
    (5, 'HAPPY TAILS', 'HOUSTON'); 

-- INSERT VALUES INTO DOG TABLE 
INSERT INTO DOG (DOGID, DOGNAME, DATEOFBIRTH, SEX, 
STOREID) 
VALUES 
    (1, 'BUDDY', '2019-03-15', 'MALE', 1), 
    (2, 'DAISY', '2020-07-10', 'FEMALE', 2), 
    (3, 'ROCKY', '2018-11-25', 'MALE', 1), 
    (4, 'LOLA', '2022-01-05', 'FEMALE', 3), 
    (5, 'MAX', '2017-09-20', 'MALE', 4); 

-- INSERT VALUES INTO OWNER TABLE 
INSERT INTO DOWNER (SSN, OWNERNAME, ADDRESS) VALUES 
    ('123-45-6789', 'ABHIMAN', '123 MAIN ST, NEW YORK'), 
    ('987-65-4321', 'JOHN SMITH', '456 ELM ST, LOS ANGELES'), 
    ('234-56-7890', 'JANE DOE', '789 OAK ST, CHICAGO'), 
    ('567-89-0123', 'MICHAEL JOHNSON', '321 MAPLE ST, SAN FRANCISCO'), 
    ('908-76-5432', 'EMMA BROWN', '654 BIRCH ST, HOUSTON'); 
   INSERT INTO DOWNER VALUES 
('2311313','SANKY','MARINE,LONDON'); 

-- INSERT VALUES INTO PURCHASE TABLE 
INSERT INTO PURCHASE (PURCHASEID, DOGID, SSN, PURCHASEDATE) 
VALUES 
    (101, 1, '123-45-6789', '2023-07-15'), 
    (102, 3, '234-56-7890', '2023-06-20'), 
    (103, 5, '908-76-5432', '2023-07-05'), 
    (104, 4, '567-89-0123', '2023-07-10'), 
    (105, 2, '987-65-4321', '2023-06-30'); 
    INSERT INTO PURCHASE VALUES (107, 2, '123-45-6789', '2023-07-15'); 
     INSERT INTO PURCHASE VALUES(106, 4, '123-45-6789', '2023-07-15');      INSERT INTO PURCHASE VALUES(108, 3, '123-45-6789', '2023-07-15'); 


C)	SELECT D.DOGNAME
    FROM DOG D, DOWNER O, PURCHASE P 
    WHERE P.DOGID=D.DOGID AND P.SSN=O.SSN     AND O.OWNERNAME='ABHIMAN'; 
 


D)	SELECT O.OWNERNAME, O.ADDRESS 
FROM DOWNER O 
WHERE NOT EXISTS ( 
    SELECT SSN 
    FROM PURCHASE P 
    WHERE O.SSN = P.SSN 
); 
 



E)	DELIMITER // 

CREATE TRIGGER MAXCOUNT 
BEFORE INSERT ON PURCHASE 
FOR EACH ROW 
BEGIN 
    IF (SELECT COUNT(*) FROM PURCHASE WHERE SSN = NEW.SSN) 
>= 3 THEN 
    SIGNAL SQLSTATE '45000' 

	SET MESSAGE_TEXT = 'YOU CANNOT PURCHASE MORE THAN 
THREE DOGS'; 
    END IF; 
END; 
// 

DELIMITER // 

 


F) CREATE PROCEDURE LISTDOGSBYDATE(IN PURCHASEDATE 
DATE) 
BEGIN 
    SELECT 
        (SELECT DOGNAME FROM DOG WHERE DOGID = P.DOGID) AS 
DOGNAME, 
        (SELECT DATEOFBIRTH FROM DOG WHERE DOGID = P.DOGID) 
AS DATEOFBIRTH, 
        (SELECT SEX FROM DOG WHERE DOGID = P.DOGID) AS SEX, 
        (SELECT OWNERNAME FROM DOWNER WHERE SSN = P.SSN) AS 
OWNERNAME, 
        (SELECT ADDRESS FROM DOWNER WHERE SSN = P.SSN) AS 
ADDRESS 
    FROM PURCHASE P 
    WHERE P.PURCHASEDATE = PURCHASEDATE; 
END; 
// 

DELIMITER ;
DROP  PROCEDURE LISTDOGSBYDATE; 
SHOW TABLES; 
CALL LISTDOGSBYDATE('2023-07-05'); 

 
4.THE COMMERCIAL BANK WANTS KEEP TRACK OF THE 
CUSTOMERâ€™S ACCOUNT INFORMATION. THE EACH  
CUSTOMER MAY HAVE ANY NUMBER OF ACCOUNTS AND ACCOUNT 
CAN BE SHARED BY ANY NUMBER OF  
CUSTOMERS. THE SYSTEM WILL KEEP TRACK OF THE DATE OF 
LAST TRANSACTION. WE STORE THE FOLLOWING  
DETAILS.  
A)	ACCOUNT: UNIQUE ACCOUNT-NUMBER, TYPE AND BALANCE  
B)	CUSTOMER: UNIQUE CUSTOMER-ID, NAME AND SEVERAL 
ADDRESSES COMPOSED OF STREET, CITY AND  
STATE 
A)	ESTABLISH THE DATABASE BY NORMALIZING UP TO 3NF AND 
CONSIDERING ALL SCHEMA LEVEL  
CONSTRAINTS  
B)	WRITE SQL INSERTION QUERY TO INSERT FEW TUPLES TO ALL 
THE RELATIONS  
C)	ADD 5% INTEREST TO THE CUSTOMER WHO HAVE LESS THAN 
10000 BALANCES AND 6% INTEREST  
TO REMAINING CUSTOMERS. 
D)	LIST JOINT ACCOUNTS INVOLVING MORE THAN THREE 
CUSTOMERS  
E)	WRITE A INSERTION TRIGGER TO ALLOW ONLY CURRENT DATE FOR DATE OF LAST TRANSACTION FIELD.  
F)	WRITE A PROCEDURE TO FIND THE CUSTOMER WHO HAS 
HIGHEST NUMBER OF ACCOUNTS, THE  
CUSTOMER WHO HAS LOWEST BALANCE, THE CUSTOMER WHO INVOLVED IN MOST OF JOINT  
ACCOUNTS. 
 

CREATE SCHEMA BANK; 
USE BANK; 
-- CREATE THE BANK TABLE 
A) CREATE TABLE BANK ( 
    BANKID INT PRIMARY KEY, 
    BANKNAME VARCHAR(100), 
    LOCATION VARCHAR(100) 
); 

-- CREATE THE BRANCH TABLE 
CREATE TABLE BRANCH ( 
    BRANCHID INT PRIMARY KEY, 
    BRANCHNAME VARCHAR(100), 
    LOCATION VARCHAR(100), 
    BANKID INT, 
    FOREIGN KEY (BANKID) REFERENCES BANK (BANKID) 
); 

-- CREATE THE CUSTOMER TABLE 
CREATE TABLE CUSTOMER ( 
    CUSTOMERID INT PRIMARY KEY,     CUSTOMERNAME VARCHAR(100) 
    -- ADD OTHER CUSTOMER DETAILS AS NEEDED 
); 

-- CREATE THE ACCOUNT TABLE 
CREATE TABLE ACCOUNT ( 
    ACCOUNTNUMBER INT PRIMARY KEY, 
    ACCOUNTTYPE VARCHAR(50), 
    BALANCE DECIMAL(10, 2), 
    LASTTRANSACTIONDATE DATE, 
    BRANCHID INT, 
    FOREIGN KEY (BRANCHID) REFERENCES BRANCH (BRANCHID) 
); 

-- CREATE A JUNCTION TABLE FOR JOINT ACCOUNTS INVOLVING 
MULTIPLE CUSTOMERS 
CREATE TABLE JOINTACCOUNT ( 
    ACCOUNTNUMBER INT, 
    CUSTOMERID INT, 
    PRIMARY KEY (ACCOUNTNUMBER, CUSTOMERID), 
    FOREIGN KEY (ACCOUNTNUMBER) REFERENCES ACCOUNT 
(ACCOUNTNUMBER), 
    FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMER 
(CUSTOMERID) 
); 
B) -- INSERT DATA INTO THE BANK TABLE 
INSERT INTO BANK (BANKID, BANKNAME, LOCATION) 
VALUES 
    (1, 'ABC BANK', 'NEW YORK'), 
    (2, 'XYZ BANK', 'LOS ANGELES'); 

-- INSERT DATA INTO THE BRANCH TABLE 
INSERT INTO BRANCH (BRANCHID, BRANCHNAME, LOCATION, 
BANKID) 
VALUES 
    (101, 'MAIN BRANCH', 'NEW YORK', 1), 
    (102, 'DOWNTOWN BRANCH', 'LOS ANGELES', 2); 

-- INSERT DATA INTO THE CUSTOMER TABLE 
INSERT INTO CUSTOMER (CUSTOMERID, CUSTOMERNAME) 
VALUES 
    (1001, 'JOHN SMITH'), 
    (1002, 'JANE DOE'), 
    (1003, 'MICHAEL JOHNSON'), 
    (1004, 'EMMA BROWN'); 

-- INSERT DATA INTO THE ACCOUNT TABLE 
INSERT INTO ACCOUNT (ACCOUNTNUMBER, ACCOUNTTYPE, 
BALANCE, LASTTRANSACTIONDATE, BRANCHID) 
VALUES 
    (10001, 'SAVINGS', 5000.00, '2023-07-15', 101), 
    (10002, 'CHECKING', 12000.00, '2023-07-14', 102), 
    (10003, 'SAVINGS', 8000.00, '2023-07-13', 101), 
    (10004, 'SAVINGS', 6000.00, '2023-07-15', 102), 
    (10005, 'CHECKING', 15000.00, '2023-07-12', 101); 

-- INSERT DATA INTO THE JOINTACCOUNT TABLE (FOR DEMONSTRATION PURPOSES) 
INSERT INTO JOINTACCOUNT (ACCOUNTNUMBER, CUSTOMERID) 
VALUES 
    (10002, 1001), 
    (10002, 1003), 
    (10002, 1003), 
    (10003, 1001), 
    (10003, 1003); 
INSERT INTO JOINTACCOUNT VALUES(10004,1001); 
INSERT INTO JOINTACCOUNT VALUES(10005,1001); 
INSERT INTO JOINTACCOUNT VALUES(10004,1001); 
INSERT INTO JOINTACCOUNT VALUES(10005,1001); 
INSERT INTO JOINTACCOUNT VALUES(10003,1004); 
INSERT INTO JOINTACCOUNT VALUES(10003,1002); 
INSERT INTO JOINTACCOUNT VALUES(10004,1003); INSERT INTO JOINTACCOUNT VALUES(10005,1002); 

C)	SELECT  ACCOUNTNUMBER, ACCOUNTTYPE, 
    BALANCE, 
    CASE 
        WHEN BALANCE < 10000 THEN BALANCE * 1.05 
        ELSE BALANCE * 1.06 
    END AS NEWINTEREST 
FROM ACCOUNT; 
 

D)	SELECT ACCOUNTNUMBER 
FROM JOINTACCOUNT 
GROUP BY ACCOUNTNUMBER 
HAVING COUNT(CUSTOMERID) > 3; 
 

E)	DELIMITER // 

CREATE TRIGGER SETCURRENTDATE 
BEFORE INSERT ON ACCOUNT 
FOR EACH ROW 
BEGIN 
    SET NEW.LASTTRANSACTIONDATE = CURRENT_DATE(); 
END; 
// 

DELIMITER ;

 
F)	DELIMITER // 

CREATE PROCEDURE CUSTOMERDETAILS() 
BEGIN 
    -- CUSTOMER WITH THE HIGHEST NUMBER OF ACCOUNTS 
    SELECT CUSTOMERID, CUSTOMERNAME, 
           (SELECT COUNT(*) FROM ACCOUNT WHERE CUSTOMERID = 
C.CUSTOMERID) AS NUMOFACCOUNTS     FROM CUSTOMER C 
    ORDER BY NUMOFACCOUNTS DESC 
    LIMIT 1; 
END; 
// 

DELIMITER ;

DROP PROCEDURE IF EXISTS CUSTOMERDETAILS; 

CALL CUSTOMERDETAILS(); 

 
